
```markdown
# 🖧 MPI_CODES

This repository showcases a collection of **Message Passing Interface (MPI)** programs designed to demonstrate core parallel computing paradigms. These include **blocking**, **non-blocking**, and **collective communication** methods, providing a comprehensive understanding of MPI programming.

---

## 🚀 Features

- **Blocking Communication**: Synchronous send and receive operations for tightly coupled tasks.
- **Non-Blocking Communication**: Asynchronous operations allowing overlapping of computation and communication.
- **Collective Communication**: Efficient data exchange across multiple processes using operations like broadcast and gather.

---

## 🛠 Prerequisites

To run these programs, ensure the following tools are installed:

- **MPI Library**: [Open MPI](https://www.open-mpi.org/) or [MPICH](https://www.mpich.org/)
- **C Compiler**: A compiler supporting MPI (e.g., `gcc` with MPI bindings)

---

## 📦 Installation

To run the programs locally, follow these steps:

1. Clone this repository:
   ```bash
   git clone https://github.com/Zain4391/MPI_CODES.git
   cd MPI_CODES
   ```

2. Compile an MPI program:
   ```bash
   mpicc -o output_file path/to/example.c
   ```

3. Run the compiled program with the desired number of processes:
   ```bash
   mpiexec -n 4 ./output_file
   ```

   Replace `output_file` with your executable name and `path/to/example.c` with the source file path.

---

## 📂 Repository Structure

The repository is organized as follows:

```plaintext
MPI_CODES/
├── Blocking/
│   ├── example1.c
│   └── example2.c
├── Non-Blocking/
│   ├── example1.c
│   └── example2.c
└── Collective/
    ├── example1.c
    └── example2.c
```

Each directory contains source files specific to the respective MPI communication paradigm.

---

## 🤝 Contributing

Contributions are welcome and encouraged! To contribute:

1. Fork this repository.
2. Create a new branch:
   ```bash
   git checkout -b feature/your-feature-name
   ```
3. Commit your changes:
   ```bash
   git commit -m "Add a meaningful commit message"
   ```
4. Push the branch:
   ```bash
   git push origin feature/your-feature-name
   ```
5. Open a pull request for review.

---
